>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

possible cases:
===============

>>> matrix_divided([[1, 2, 3],[4, 5, 6]], 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

::

>>> matrix = [[1, 2, 3], [4.5, 5, 6]]
>>> print(matrix_divided(matrix, float("inf")))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

::

>>> matrix = [[1.1, 2, 3], [4.5, 5, 6]]
>>> print(matrix_divided(matrix, 3.5))
[[0.31, 0.57, 0.86], [1.29, 1.43, 1.71]]

::
Failure cases
=============

>>> matrix_divided([[1, 2, 3],[4, 5, "a"]], 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 2, 3],[4, 5, 0]], 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero

>>> matrix_divided([[1, 2, 3],[4, 5]], 5)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

>>> matrix_divided([], 4)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = "not a list"
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

::

>>> matrix = None
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

::

>>> matrix = []
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

::

>>> matrix = [[1, 2], [3, 4]]
>>> print(matrix_divided(matrix, "2"))
Traceback (most recent call last):
TypeError: div must be a number

::

>>> matrix = [[1, 2], [3, 4]]
>>> print(matrix_divided(matrix))
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'
